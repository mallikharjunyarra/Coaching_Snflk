what are the iterators in python?

What is lambda FUNCTION ?
	In Python, a lambda function is a small anonymous function that is defined using the lambda keyword. 
	Unlike regular functions defined using the def keyword, lambda functions can have any number of arguments 
	but can only have a single expression.They are often used for short, throwaway functions that are not going to be reused elsewhere.
	
	The syntax of a lambda function is:	lambda arguments: expression
	Characteristics:-
	Anonymous: Lambda functions do not have a name unless you assign them to a variable.
	Single Expression: They can only contain a single expression. The result of this expression is returned automatically.
	Inline Use: They are often used in situations where a small function is needed for a short period, such as in functional programming constructs (like map, filter, and reduce).
	When to Use Lambda Functions
	Short Functions: When you need a small function for a short period.
	Functional Programming: In functional programming scenarios, like with map, filter, or reduce.
	Readability: To enhance code readability for small functions in cases where a full function definition might be unnecessarily verbose.
	Limitations:-
	Single Expression: They can only consist of a single expression, making them less suitable for complex logic.
	No Documentation: Lambda functions do not support docstrings, which can make them less clear for others reading the code.
	
	Besic Example:- square = lambda x: x ** 2  print(square(5))  # Output: 25
	with Multiple Arguments:- add = lambda x, y: x + y print(add(3, 4))  # Output: 7
	Using with map: The map function applies a given function to all items in an iterable (like a list).
		numbers = [1, 2, 3, 4]
		squares = list(map(lambda x: x ** 2, numbers))
		print(squares)  # Output: [1, 4, 9, 16]
	Using with filter: The filter function filters elements from an iterable based on a function that returns True or False.
		numbers = [1, 2, 3, 4, 5, 6]
		even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
		print(even_numbers)  # Output: [2, 4, 6]
		Using with sorted: You can use a lambda function to define a custom sort order.

		points = [(1, 2), (3, 1), (5, 0), (0, 4)]
		sorted_points = sorted(points, key=lambda point: point[1])
		print(sorted_points)  # Output: [(5, 0), (3, 1), (1, 2), (0, 4)]

	
What is the function pass by value and referance.:
		In Python, the concept of "pass by value" and "pass by reference" can be a bit different compared to languages like C or C++. Lets break down what they mean and how Python handles them:

		1. Pass by Value
		In languages that use "pass by value," a copy of the variable is passed to the function. Changes made to the parameter inside the function do not affect the original variable.

		2. Pass by Reference
		In "pass by reference," the actual reference (or address) of the variable is passed to the function, so changes made to the parameter inside the function will affect the original variable.

		How Python Works: "Pass by Object Reference"
		Python uses a model called "pass by object reference" (or "pass by assignment"), which is somewhat a combination of the above two concepts:
		Mutable objects (like lists, dictionaries, sets, etc.): If you pass a mutable object (e.g., a list or dictionary) to a function, and you modify it inside the function, the changes will reflect in the original object. This is because Python passes the reference to the same object.

		def modify_list(my_list):
			my_list.append(4)

		original_list = [1, 2, 3]
		modify_list(original_list)
		print(original_list)  # Output: [1, 2, 3, 4]

		In this case, my_list inside the function refers to the same list as original_list, so changes are seen outside the function as well.
		Immutable objects (like integers, strings, tuples, etc.): If you pass an immutable object (e.g., an integer, string, or tuple), Python will treat it as a new value inside the function. Any changes you make inside the function will not affect the original object.

		python
		Copy code
		def modify_value(x):
			x = x + 10

		original_value = 5
		modify_value(original_value)
		print(original_value)  # Output: 5
		In this case, x inside the function is a new object, separate from original_value, so the original value remains unchanged.

		Summary:-Python does not strictly follow "pass by value" or "pass by reference."
		It uses "pass by object reference."
		If you pass a mutable object, changes inside the function will affect the original object.
		If you pass an immutable object, changes inside the function will not affect the original object.
what is the differenace between list sort and sorted functions ?
	In Python, both list.sort() and sorted() can be used to sort items, but there are key differences between them in terms of how they operate and their flexibility.

	1. list.sort()
		Method Type: list.sort() is a method that can be called on a list object.In-place Sorting: It modifies the original list in place and does not create a new list. This means that the original list is changed, and no new list is returned.Return Value: It returns None, which means you cannot assign the result to a new variable. Instead, it directly alters the original list.
	2. sorted()
		Function Type: sorted() is a built-in function that can take any iterable (not just lists) as an input (e.g., tuples, strings, dictionaries).
		Creates a New List: It creates and returns a new sorted list, leaving the original iterable unchanged.
        Return Value: It returns the new sorted list, so you can assign it to a variable.
		
# WAP if Input: l1 = [1,[2,3, [4, 5]]] #Output: l1 = [1,2,3,4,5]

	def flatten(nested_list):
		flat_list = []
		for item in nested_list:
			if isinstance(item, list):
				flat_list.extend(flatten(item))  # Recursively flatten the sublist
			else:
				flat_list.append(item)  # Add non-list items directly
		return flat_list

	# Example usage
	l1 = [1, [2, 3, [4, 5]]]
	flattened_l1 = flatten(l1)
	print(flattened_l1)  # Output: [1, 2, 3, 4, 5]

How to find the class is the child class or not ?
	n Python, you can check if a class is a child (or subclass) of another class using the built-in issubclass() function or by using the __bases__ attribute. Heres how you can do this:

	Using issubclass()
	The issubclass() function checks if a class is a subclass of another class or a tuple of classes.
	issubclass(child_class, parent_class)
	class Bird:pass
	class Fish:pass
	class Sparrow(Bird):pass
	# Check if Sparrow is a subclass of either Bird or Fish
	print(issubclass(Sparrow, (Bird, Fish)))  # Output: True
	# Check if Sparrow is a subclass of Dog or Fish
	print(issubclass(Sparrow, (Dog, Fish)))   # Output: False

how to find the factorial of given number?
	def factorial_iterative(n):
    if n < 0:
        return "Factorial is not defined for negative numbers."
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

	# Example usage
	number = 5
	print(factorial_iterative(number))  # Output: 120

how to find the factorial of given number by using recursive function?
	
	def factorial_recursive(n):
    if n < 0:
        return "Factorial is not defined for negative numbers."
    elif n == 0 or n == 1:
        return 1  # Base case
    else:
        return n * factorial_recursive(n - 1)  # Recursive case

	# Example usage
	number = 5
	print(factorial_recursive(number))  # Output: 120

how to find the list of the prime numbers for the n NUMBER.

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def list_primes(n):
    return [i for i in range(n + 1) if is_prime(i)]

# Example usage
n = 30
prime_numbers = list_primes(n)
print(prime_numbers)  # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, num):
      #print(i)
      if num % i == 0:
        return False
    return True

def list_primes(n):
    return [i for i in range(n + 1) if is_prime(i)]

# Example usage
n = 30
prime_numbers = list_primes(n)
print(prime_numbers) 


